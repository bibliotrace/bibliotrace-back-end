name: CI / App

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize, edited]
    paths:
      - "src/**"
      - "docker-compose.yml"
      - ".github/workflows/ci.yml"

permissions:
  id-token: write
  contents: read

env:
  node_version: "22.x"
  FORCE_COLOR: 3

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: bibliotrace_v3
          MYSQL_USER: admin
          MYSQL_PASSWORD: Bibl!otrace_2025
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
          cache: npm
          cache-dependency-path: "package-lock.json"

      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h"127.0.0.1" --silent; do
            echo 'waiting for mysql to be ready...'
            sleep 5
          done

      - name: npm ci
        working-directory: src
        run: npm ci --prefer-offline

      - name: npm test
        working-directory: src
        run: npm test

  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}

      # We don't need to install deps to audit them

      - name: npm audit
        working-directory: src
        run: npm audit --audit-level=critical

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
          cache: npm
          cache-dependency-path: "package-lock.json"

      - name: npm ci
        working-directory: src
        run: npm ci --prefer-offline

      - name: npm lint
        working-directory: src
        run: npm run lint

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: docker build
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Create dist
        run: |
          mkdir dist
          cp Dockerfile dist
          cp -r src/* dist
          cp *.json dist

      - name: Update distribution artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download distribution artifact
        uses: actions/download-artifact@v4
        with:
          name: package

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Enable debug logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      - name: Create OIDC token to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up machine emulation
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker build
        uses: docker/setup-buildx-action@v3

      - name: Build and push container image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: "bibliotrace"
        run: |
          docker build --platform=linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY --push .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >>  $GITHUB_OUTPUT
